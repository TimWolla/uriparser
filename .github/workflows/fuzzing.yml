# Copyright (C) 2025 Sebastian Pipping <sebastian@pipping.org>
# Licensed under the MIT license

name: Run fuzzing regression tests

on:
  pull_request:
  push:
  schedule:
    - cron: '0 2 * * 5'  # Every Friday at 2am
  workflow_dispatch:

permissions:
  contents: read

jobs:
  run_fuzzers:
    name: Run fuzzing regression tests
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2

    - name: Install Clang 19
      run: |-
        set -x
        source /etc/os-release
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo add-apt-repository "deb https://apt.llvm.org/${UBUNTU_CODENAME}/ llvm-toolchain-${UBUNTU_CODENAME}-19 main"
        sudo apt-get update  # due to new repository
        sudo apt-get install --yes --no-install-recommends -V \
            clang-19 \
            libclang-rt-19-dev \
            llvm-19
        echo /usr/lib/llvm-19/bin >>"${GITHUB_PATH}"

    - name: Build uriparser fuzzers
      run: |
        set -x -o pipefail

        type -P clang clang++
        clang --version | head -n1
        clang++ --version | head -n1

        args=(
            # Build nothing but fuzzers
            -DURIPARSER_BUILD_DOCS=OFF
            -DURIPARSER_BUILD_TESTS=OFF
            -DURIPARSER_BUILD_FUZZERS=ON
            -DURIPARSER_BUILD_TOOLS=OFF
            -DURIPARSER_ENABLE_INSTALL=OFF
            -DURIPARSER_OSSFUZZ_BUILD=OFF

            # Tune compilation of fuzzers to use Clang with ASan and UBSan
            -DCMAKE_C_COMPILER=clang
            -DCMAKE_C_FLAGS='-Wall -Wextra -pedantic -O1 -g -fsanitize=address,undefined -fno-sanitize-recover=all -fno-omit-frame-pointer -fno-common'
            -DCMAKE_{EXE,MODULE,SHARED}_LINKER_FLAGS='-g -fsanitize=address,undefined'
            -DURIPARSER_WARNINGS_AS_ERRORS=ON
        )
        cmake "${args[@]}" -S . -B build
        make -C build VERBOSE=1 -j$(nproc)

    - name: Download and extract uriparser fuzzing corpora
      run: |-
        set -x -o pipefail
        cd build/

        # Extract fuzzer names from code to not have to hardcode them in multiple places
        # TODO: Integrate "uri_*w_fuzzer" fuzzers here once a public corpus becomes available
        git grep -h 'add_ansi_and_unicode_fuzzer(' -- ../CMakeLists.txt | sed -r 's|.*\((.*) .*|\1_fuzzer|' | tee fuzzer_names.txt
        [[ "$(wc -l < fuzzer_names.txt)" = 3 ]]  # i.e. fail the CI for unexpected numbers, adjust number when adding fuzzers

        while read i ; do
          wget -q -O "${i}.zip" "https://storage.googleapis.com/uriparser-backup.clusterfuzz-external.appspot.com/corpus/libFuzzer/uriparser_${i}/public.zip"
          unzip -q -d "corpus_${i}" "${i}.zip"
        done < fuzzer_names.txt

    - name: Run fuzzing regression tests
      run: |
        fuzz_args=(
            -jobs=$(nproc)
            -print_final_stats=1
            -rss_limit_mb=2560  # from OSS-Fuzz
            -timeout=25         # from OSS-Fuzz
        )

        set -x -o pipefail
        cd build/

        while read i ; do
          pushd corpus_"${i}"/
            find . -type f | sort | xargs ../fuzz/"${i}" "${fuzz_args[@]}"
          popd
        done < fuzzer_names.txt

    - name: Store fuzzing logs
      uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882  # v4.4.3
      with:
        name: uriparser_fuzzing_logs_${{ github.sha }}
        path: build/*/fuzz-*.log
        if-no-files-found: error
